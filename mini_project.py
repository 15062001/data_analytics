# -*- coding: utf-8 -*-
"""Mini project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vkq1rubYKwSf1MaXm5SyVUyGdQTZoTJ2
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
# %matplotlib inline
warnings.filterwarnings('ignore')

df=pd.read_csv("/content/drive/MyDrive/Business/supermarkt_sales.csv")

df.info()

df.isnull().sum()

df.head(10)

df.tail(10)

df.apply(lambda x:len(x.unique()))

df['Product line'].value_counts()

l=list(df['Product line'].unique())
chart=sns.countplot(df["Product line"])
chart.set_xticklabels(labels=l,rotation=90)

corr=df.corr()
sns.heatmap(corr,annot=True,cmap='coolwarm')

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
cat_col=['Payment']
for col in cat_col:
  df[col]=le.fit_transform(df[col])

df.head()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
cat_col = ['City']
for col in cat_col:
  df[col]=le.fit_transform(df[col])

cat_col = ['Customer_type']
for col in cat_col:
  df[col]=le.fit_transform(df[col])

cat_col = ['Branch']
for col in cat_col:
  df[col]=le.fit_transform(df[col])

cat_col = ['Gender']
for col in cat_col:
  df[col]=le.fit_transform(df[col])

cat_col = ['Product line']
for col in cat_col:
  df[col]=le.fit_transform(df[col])

cat_col = ['Payment']
for col in cat_col:
  df[col]=le.fit_transform(df[col])

del df['Invoice ID']

df

!pip install streamlit -q

df

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import pandas as pd
# import plotly.express as px
# import streamlit as st
# 
# st.set_page_config(page_title="Sales Dashboard",
#                    page_icon=":bar_chart:", layout="wide")
# 
# # Load dataset
# df=pd.read_csv("/content/drive/MyDrive/Business/supermarkt_sales.csv")
# 
# 
# st.sidebar.header("Filters")
# city = st.sidebar.multiselect(
#     "Pick a city : ", options=df["City"].unique(), default=df["City"].unique())
# customer = st.sidebar.multiselect(
#     "Customer type : ", options=df["Customer_type"].unique(), default=df["Customer_type"].unique())
# product = st.sidebar.multiselect(
#     "Product line : ", options=df["Product line"].unique(), default=df["Product line"].unique())
# customerGender = st.sidebar.multiselect(
#     "Gender : ", options=df["Gender"].unique(), default=df["Gender"].unique())
# 
# df_selection = df.query(
#     "City == @city & `Customer_type` == @customer & `Product line` == @product & Gender == @customerGender")
# 
# st.title(":bar_chart: Sales Dashboard ")
# st.markdown("##")
# 
# total = round(df_selection["Total"].sum(), 2)
# avg_sale_transc = round(df_selection["Total"].mean(), 2)
# avg_rating = round(df_selection["Rating"].mean(), 1)
# starRating = ":star:" * int(round(avg_rating, 0))
# 
# left, middle, right = st.columns(3)
# with left:
#     st.subheader("Total Sales : ")
#     st.subheader(f"US $ {total}")
# with middle:
#     st.subheader("Average Rating :")
#     st.subheader(f"{avg_rating} {starRating}")
# with right:
#     st.subheader("Average sales per transaction :")
#     st.subheader(f"US $ {avg_sale_transc}")
# 
# st.markdown("---")
# 
# # Sales by Product Graph
# sales_by_product = (df_selection.groupby(by=["Product line"]).sum()["Total"])
# fig_product_sale = px.bar(sales_by_product, x=sales_by_product.index, y="Total", orientation="h",
#                           template="plotly_white", title="<b>Sales by Product<b>")
# 
# # Payment Type
# payment_method_type = df_selection.groupby(by=["Payment"]).sum()["Total"]
# fig_payment = px.bar(payment_method_type, x=payment_method_type.index, y="Total", orientation="h",
#                      template="plotly_white", title="<b>Payment Type<b>")
# 
# # Gender Pie Chart
# gender_counts = df["Gender"].value_counts()
# fig_gender = px.pie(values=gender_counts.values, names=gender_counts.index, title="Overall Gender ratio")
# 
# # Sales by City Graph
# sales_by_city = (df_selection.groupby(by=["City"]).sum()["Total"])
# fig_sales_city = px.bar(sales_by_city, x=sales_by_city.index, y="Total", orientation="v",
#                         template="plotly_white", title="<b>Sales by City<b>")
# 
# # Sales by Customer Type
# sales_by_customer_type = (df_selection.groupby(by=["Customer_type"]).sum()["Total"])
# fig_sales_customer_type = px.bar(sales_by_customer_type, x=sales_by_customer_type.index, y="Total", orientation="v",
#                                  template="plotly_white", title="<b>Sales by Customer Type<b>")
# 
# # Sales Heatmap
# df_selection["Date"] = pd.to_datetime(df_selection["Date"])
# df_selection["Month"] = df_selection["Date"].dt.month_name()
# df_selection["Year"] = df_selection["Date"].dt.year
# sales_heatmap = df_selection.pivot_table(index="Month", columns="Year", values="Total", aggfunc="sum")
# fig_sales_heatmap = px.imshow(sales_heatmap, color_continuous_scale='Viridis',
#                               title="<b>Sales Heatmap<b>")
# 
# # Display additional graphs
# st.plotly_chart(fig_sales_city)
# st.markdown("##")
# st.plotly_chart(fig_sales_customer_type)
# st.markdown("##")
# st.plotly_chart(fig_sales_heatmap)
# 
# 
# st.plotly_chart(fig_product_sale)
# st.markdown("##")
# st.plotly_chart(fig_payment)
# st.markdown("##")
# st.plotly_chart(fig_gender)
# 
# # Hiding Streamlit contents
# hide_st_style = """
# <style>
# #MainMenu{visibility:hidden;}
# footer{visibility:hidden;}
# header{visibility:hidden;}
# </style>
# """
# 
# st.markdown(hide_st_style, unsafe_allow_html=True)
#

!wget -q -O - ipv4.icanhazip.com

! streamlit run app.py & npx localtunnel --port 8501

df.shape
df.info()
df.describe()

sns.heatmap(df.corr(),annot=False)

plt.scatter(df['gross income'],df['Unit price'])
plt.xlabel("Gross income")
plt.ylabel("Unit price")
plt.show()

X = df['Unit price']
y = df['Quantity']

from sklearn.model_selection import train_test_split
X_train_lm, X_test_lm, y_train_lm, y_test_lm = train_test_split(X, y, train_size = 0.7,
test_size = 0.3, random_state = 100)

print(X_train_lm.shape)
print(X_test_lm.shape)
# Adding additional column to the train and test data
X_train_lm = X_train_lm.values.reshape(-1,1)
X_test_lm = X_test_lm.values.reshape(-1,1)
print(X_train_lm.shape)
print(X_test_lm.shape)

from sklearn.linear_model import LinearRegression
# Creating an object of Linear Regression
lm = LinearRegression()
# Fit the model using .fit() method
lm.fit(X_train_lm, y_train_lm)

print("Intercept :",lm.intercept_)
# Slope value
print('Slope :',lm.coef_)

from sklearn.metrics import r2_score
# Making Predictions of y_value
y_train_pred = lm.predict(X_train_lm)
y_test_pred = lm.predict(X_test_lm)
# Comparing the r2 value of both train and test data
print(r2_score(y_train_lm,y_train_pred))
print(r2_score(y_test_lm,y_test_pred))

plt.scatter(X_train_lm, y_train_lm)
plt.plot(X_train_lm, 5.524396678498919 + 9.88083783e-05*X_train_lm, 'r')
plt.show()

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold

lm = LinearRegression()
scores = cross_val_score(lm, X_train_lm, y_train_lm, scoring='r2', cv=5)
scores

X = df['Product line']
y = df['Rating']

from sklearn.model_selection import train_test_split
X_train_lm, X_test_lm, y_train_lm, y_test_lm = train_test_split(X, y, train_size = 0.7,
test_size = 0.3, random_state = 100)

print(X_train_lm.shape)
print(X_test_lm.shape)
# Adding additional column to the train and test data
X_train_lm = X_train_lm.values.reshape(-1,1)
X_test_lm = X_test_lm.values.reshape(-1,1)
print(X_train_lm.shape)
print(X_test_lm.shape)

from sklearn.linear_model import LinearRegression
# Creating an object of Linear Regression
lm = LinearRegression()
# Fit the model using .fit() method
lm.fit(X_train_lm, y_train_lm)

print("Intercept :",lm.intercept_)
# Slope value
print('Slope :',lm.coef_)

y_train_pred = lm.predict(X_train_lm)
y_test_pred = lm.predict(X_test_lm)
# Comparing the r2 value of both train and test data
print(r2_score(y_train_lm,y_train_pred))
print(r2_score(y_test_lm,y_test_pred))

plt.scatter(X_train_lm, y_train_lm)
plt.plot(X_train_lm, 7.021856291819827 + -0.02924216*X_train_lm, 'r')
plt.show()

del df['Tax 5%']

sns.pairplot(df)
plt.show()

